color = 'Condition'
)
m <- mt_time_normalize(m)
mt_plot(
m,
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot(
m,
use = 'tn_trajectories',
color = 'Condition'
)
m_tn <- mt_time_normalize(
m,
nsteps = 101
)
#plot
mt_plot(
m_tn,
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'congruent'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
m <- mt_measures(m, use = 'tn_trajectories')
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition'
)
mt_measures_ag
View(d)
# loading packages
pacman::p_load(mousetrap, tidyverse)
# loading in data
d <- list.files(path = "./data/", pattern = "*.csv", full.names = T) %>%
map_df(~read_csv(.))
d <- d %>% mutate(correct_figure = ifelse(correct_button=="left_button", left_figure,right_figure)) %>%
mutate(congruent= ifelse(correct_figure=="kiki"& sound=="A7"|correct_figure=="bouba"& sound=="A1", "congruent","incongruent")) %>%
filter(subject_nr!=5)
m <- mt_import_mousetrap(d)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
mt_plot(m, color = 'Condition', alpha = 0.5)
# align the mouse trajectories to one side
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
# plot again
mt_plot(
m,
use = 'trajectories',
color = 'Condition',
alpha = 0.4)
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_time_normalize(m)
mt_plot(
m,
use = 'tn_trajectories',
color = 'Condition'
)
m_tn <- mt_time_normalize(
m,
nsteps = 101
)
#plot
mt_plot(
m_tn,
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
m <- mt_measures(m, use = 'tn_trajectories')
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
m <- mt_measures(m, use = 'tn_trajectories')
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition'
)
mt_measures_ag
?mt_aggregate
View(m)
View(d)
# loading packages
pacman::p_load(mousetrap, tidyverse)
# loading in data
d <- list.files(path = "./data/", pattern = "*.csv", full.names = T) %>%
map_df(~read_csv(.))
d <- filter(correct==1)
d <- d %>% filter(correct==1)
m <- mt_import_mousetrap(d)
m5 <- mt_import_mousetrap(d5)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
mt_plot(m, color = 'Condition', alpha = 0.5)
# align the mouse trajectories to one side
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
# plot again
mt_plot(
m,
use = 'trajectories',
color = 'Condition',
alpha = 0.4)
# turns the data upside down, so it resembles the actual mouse tracking task
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_exclude_initiation(m)
# loading packages
pacman::p_load(mousetrap, tidyverse)
# loading in data
d <- list.files(path = "./data/", pattern = "*.csv", full.names = T) %>%
map_df(~read_csv(.))
d <- d %>% filter(correct==1)
m <- mt_import_mousetrap(d)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
mt_plot(m, color = 'Condition', alpha = 0.5)
# align the mouse trajectories to one side
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
# plot again
mt_plot(
m,
use = 'trajectories',
color = 'Condition',
alpha = 0.4)
# turns the data upside down, so it resembles the actual mouse tracking task
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_time_normalize(m)
mt_plot(
m,
use = 'tn_trajectories',
color = 'Condition'
)
m_tn <- mt_time_normalize(
m,
nsteps = 101
)
#plot
mt_plot(
m_tn,
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
m <- mt_measures(m, use = 'tn_trajectories')
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition'
)
mt_measures_ag
m <- mt_subset(
m,
correct == '1'
)
# an example of aligning the data
m_align <- mt_align(
m,
use = 'trajectories',
dimensions = c("xpos", "ypos"),
coordinates = c(0,0,-350,250),
align_start = T,
align_end = T
)
# plot again
mt_plot(
m_align,
use = 'trajectories',
)
mt_plot(
m_align,
use = 'trajectories',
color = 'trial_type'
) +
theme_minimal() +
labs(title = 'Alligned mouse-tracking data', x = 'Postition (x)', y = 'Postistion(y)', color = 'Trial Type')
View(d)
d <- d %>% filter(correct==1 & practice == no)
# loading packages
pacman::p_load(mousetrap, tidyverse)
# loading in data
d <- list.files(path = "./data/", pattern = "*.csv", full.names = T) %>%
map_df(~read_csv(.))
d <- d %>% filter(correct==1 & practice == "no")
m <- mt_import_mousetrap(d)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
mt_plot(m, color = 'Condition', alpha = 0.5)
# align the mouse trajectories to one side
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
# plot again
mt_plot(
m,
use = 'trajectories',
color = 'Condition',
alpha = 0.4)
# turns the data upside down, so it resembles the actual mouse tracking task
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'Condition'
)
m <- mt_time_normalize(m)
mt_plot(
m,
use = 'tn_trajectories',
color = 'Condition'
)
m_tn <- mt_time_normalize(
m,
nsteps = 101
)
#plot
mt_plot(
m_tn,
use = 'tn_trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'trajectories',
color = 'Condition'
)
mt_plot_aggregate(
m,
use = 'tn_trajectories',
color = 'Condition'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
m <- mt_measures(m, use = 'tn_trajectories')
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition'
)
mt_measures_ag
m <- mt_subset(
m,
correct == '1'
)
# an example of aligning the data
m_align <- mt_align(
m,
use = 'trajectories',
dimensions = c("xpos", "ypos"),
coordinates = c(0,0,-350,250),
align_start = T,
align_end = T
)
# plot again
mt_plot(
m_align,
use = 'trajectories',
)
mt_plot(
m_align,
use = 'trajectories',
color = 'trial_type'
) +
theme_minimal() +
labs(title = 'Alligned mouse-tracking data', x = 'Postition (x)', y = 'Postistion(y)', color = 'Trial Type')
mt_plot(
m_align,
use = 'trajectories',
color = 'Congruent'
) +
theme_minimal() +
labs(title = 'Alligned mouse-tracking data', x = 'Postition (x)', y = 'Postistion(y)', color = 'Trial Type')
d <- d %>% mutate(correct=as.factor(correct))
d %>% group_by(correct) %>% summarise(count)
d %>% group_by(correct) %>% summarise(count())
?summarise
d %>% group_by(correct) %>% summarise(count = count())
d %>% group_by(correct) %>% summarise(count = count
d %>% group_by(correct) %>% summarise(count = count)
d %>% group_by(correct) %>% summarise(count = count)
d %>% group_by(correct) %>% summarise(n = count)
?table
?mt_aggregate
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
mt_measures_ag
mt_measures_ag <- mt_aggregate(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
#subject_id = "subject_nr"
)
mt_measures_ag
View(mt_measures_ag)
View(m)
m[["measures"]][["initiation_time"]]
df <- mt_export_wide(m)
View(df)
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
#subject_id = "subject_nr"
)
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
mt_measures_ag
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT''total_response_time'), # if you want all of the measures, exclude this line
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT','total_response_time'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT','idletime'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT','idle_time'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
mt_measures_ag
hist(mt_measures_ag$AUC)
ggplot(mt_measures_ag)+
aes(x=AUC)+
geom_histogram()
ggplot(mt_measures_ag)+
aes(x=AUC, color=Condition)+
geom_histogram()
ggplot(mt_measures_ag)+
aes(x=AUC, color=Condition)+
geom_histogram()+
theme_minimal()
ggplot(mt_measures_ag)+
aes(x=AUC, fill=Condition)+
geom_histogram()+
theme_minimal()
ggplot(mt_measures_ag)+
aes(x=AUC, fill=Condition)+
geom_histogram(bins = 10)+
theme_minimal()
t.test(AUC ~ Condition, data = m, paired = TRUE, var.equal = TRUE)
m <- mt_measures(m, use = 'tn_trajectories')
mt_measures_ag <- mt_aggregate_per_subject(
m,
use = 'measures',
use_variables = c('MAD', 'xpos_flips','AUC', 'RT','idle_time'), # if you want all of the measures, exclude this line
use2_variables = 'Condition',
subject_id = "subject_nr"
)
t.test(MAD~Condition, data = mt_measures_ag, paired = TRUE)
t.test(AUC~Condition, data = mt_measures_ag, paired = TRUE)
